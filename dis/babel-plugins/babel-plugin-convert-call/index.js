"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=plugin,exports.pluginName=void 0;function _toConsumableArray(a){return _arrayWithoutHoles(a)||_iterableToArray(a)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(a){if(Symbol.iterator in Object(a)||"[object Arguments]"===Object.prototype.toString.call(a))return Array.from(a)}function _arrayWithoutHoles(a){if(Array.isArray(a)){for(var b=0,c=Array(a.length);b<a.length;b++)c[b]=a[b];return c}}var pluginName="babel-plugin-convert-call";// Call identifier function auto bind global "this"
// Fixed by: convert identifier call with .call with custom "this"
exports.pluginName="babel-plugin-convert-call";function plugin(a){var b=a.types;return{visitor:{CallExpression:function e(a){// Only apply for identifier function, member expression ignored
if(a.node.callee&&b.isIdentifier(a.node.callee)){var c=a.node,d=c.arguments;// In core-sandbox-engine variable "window" is global cope
a.replaceWith(b.callExpression(b.memberExpression(c.callee,b.identifier("call")),[b.identifier("window")].concat(_toConsumableArray(d))))}}}}}